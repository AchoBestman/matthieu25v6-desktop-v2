name: Prophet Kacou Release Process
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
    inputs:
      application:
        description: "The fully qualified slug of your app on CrabNebula Cloud"
        required: true
        default: "prophet-kacou/prophet-kacou"

env:
  CN_APPLICATION: ${{ vars.CN_APPLICATION }}
  APPLE_ID: ${{ vars.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ vars.APPLE_ID_PASSWORD }}
  APPLE_EXPORT_CERTIFICATE_PASSWORD: ${{ vars.APPLE_EXPORT_CERTIFICATE_PASSWORD }}
  CN_API_KEY: ${{ vars.CN_API_KEY }}
  RELEASE_NOTE: ./release-notes.txt
  APPLE_CERTIFICATE: ${{ vars.APPLE_CERTIFICATE }}
  KEYCHAIN_PASSWORD: ${{ vars.KEYCHAIN_PASSWORD }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ vars.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ vars.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  draft:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: create draft release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri --notes-file ${{ env.RELEASE_NOTE }}
          api-key: ${{ env.CN_API_KEY }}

  # Build jobs separated by architecture/platform for native compilation
  build-macos:
    name: Build macOS Universal
    needs: draft
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Add Rust targets for Universal Binary
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build macOS Universal
        run: pnpm tauri build --target universal-apple-darwin
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  build-windows-x64:
    name: Build Windows x64
    needs: draft
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Add Rust target
        run: rustup target add x86_64-pc-windows-msvc
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Windows x64
        run: pnpm tauri build --target x86_64-pc-windows-msvc
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  build-windows-x86:
    name: Build Windows x86
    needs: draft
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Add Rust target
        run: rustup target add i686-pc-windows-msvc
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Windows x86
        run: pnpm tauri build --target i686-pc-windows-msvc
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  build-windows-arm64:
    name: Build Windows ARM64
    needs: draft
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Add Rust target
        run: rustup target add aarch64-pc-windows-msvc
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Windows ARM64
        run: pnpm tauri build --target aarch64-pc-windows-msvc
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  build-linux-x64:
    name: Build Linux x64
    needs: draft
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          sudo apt-get install -y pkg-config build-essential
      - name: Add Rust target
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Linux x64
        run: pnpm tauri build --target x86_64-unknown-linux-gnu
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  # Optional: Linux x86 using native i386 runner (if available)
  build-linux-x86:
    name: Build Linux x86
    needs: draft
    runs-on: ubuntu-22.04  # Note: GitHub doesn't provide native i386 runners
    # Alternative: Use self-hosted runner with i386 architecture
    # runs-on: [self-hosted, linux, i386]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      # Since GitHub doesn't provide native i386 runners, we still need cross-compilation here
      # But it's simplified since we only handle one target per job
      - name: Install Linux i386 dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib g++-multilib
          sudo apt-get install -y gcc-i686-linux-gnu g++-i686-linux-gnu
          # Try to install 32-bit libraries (some may fail)
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev:i386 \
            libgtk-3-dev:i386 \
            librsvg2-dev:i386 \
            libglib2.0-dev:i386 \
            libcairo2-dev:i386 \
            libpango1.0-dev:i386 \
            libatk1.0-dev:i386 \
            libgdk-pixbuf-2.0-dev:i386 || echo "Some packages failed, continuing..."
          # Fallback for appindicator
          sudo apt-get install -y libappindicator3-dev:i386 || echo "libappindicator3-dev:i386 not available"
      - name: Configure cross-compilation environment
        run: |
          echo "CC_i686_unknown_linux_gnu=i686-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_i686_unknown_linux_gnu=i686-linux-gnu-g++" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig" >> $GITHUB_ENV
      - name: Add Rust target
        run: rustup target add i686-unknown-linux-gnu
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Linux x86
        run: pnpm tauri build --target i686-unknown-linux-gnu
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  # Optional: Linux ARM64 using native ARM runner (if available)
  build-linux-arm64:
    name: Build Linux ARM64
    needs: draft
    # GitHub provides ARM64 runners for some plans
    runs-on: ubuntu-22.04-arm64  # Or use: [self-hosted, linux, arm64]
    # Fallback to cross-compilation if no native ARM runner:
    # runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli
      - name: Install Linux dependencies (native ARM64)
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          sudo apt-get install -y pkg-config build-essential
      - name: Add Rust target
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Linux ARM64
        run: pnpm tauri build --target aarch64-unknown-linux-gnu
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  publish:
    needs: 
      - build-macos
      - build-windows-x64
      - build-windows-x86
      - build-windows-arm64
      - build-linux-x64
      - build-linux-x86
      - build-linux-arm64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Publish release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release publish ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}