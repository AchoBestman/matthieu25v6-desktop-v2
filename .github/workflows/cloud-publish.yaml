name: Prophet Kacou Release Process
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
    inputs:
      application:
        description: "The fully qualified slug of your app on CrabNebula Cloud"
        required: true
        #doit etre ici valeur en dure
        default: "prophet-kacou/prophet-kacou"
env:
  CN_APPLICATION: ${{ github.event.inputs.application || vars.CN_APPLICATION }}
  APPLE_ID: ${{ vars.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ vars.APPLE_ID_PASSWORD }}
  APPLE_EXPORT_CERTIFICATE_PASSWORD: ${{ vars.APPLE_EXPORT_CERTIFICATE_PASSWORD }}
  CN_API_KEY: ${{ vars.CN_API_KEY }}
  RELEASE_NOTE: ./release-notes.txt
  APPLE_CERTIFICATE: ${{ vars.APPLE_CERTIFICATE }}
  KEYCHAIN_PASSWORD: ${{ vars.KEYCHAIN_PASSWORD }} #The password of my keychain
  TAURI_SIGNING_PRIVATE_KEY: ${{ vars.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ vars.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

#The concurrency block will prevent multiple releases from happening at the same time.
concurrency:
  #${{ github.workflow }} Value: "Prophet Kacou Release Process"
  #${{ github.ref }} Value: "refs/heads/deploy"
  group: ${{ github.workflow }}-${{ github.ref }} # value is: Prophet Kacou Release Process refs/heads/deploy
  cancel-in-progress: true

jobs:
  draft:
    runs-on: ubuntu-22.04

    steps:
      #Cette action sert uniquement à récupérer le code du repo dans ton job GitHub Actions.La version v4 est la version stable actuelle
      - uses: actions/checkout@v4

      - name: Show all environment variables
        run: |
          echo "CN_APPLICATION=$CN_APPLICATION and ${{env.CN_APPLICATION}}"
          echo "APPLE_ID=$APPLE_ID"
          echo "APPLE_ID_PASSWORD=$APPLE_ID_PASSWORD"
          echo "APPLE_EXPORT_CERTIFICATE_PASSWORD=$APPLE_EXPORT_CERTIFICATE_PASSWORD"
          echo "CN_API_KEY=$CN_API_KEY"
          echo "RELEASE_NOTE=$RELEASE_NOTE"
          echo "APPLE_CERTIFICATE=$APPLE_CERTIFICATE"
          echo "KEYCHAIN_PASSWORD=$KEYCHAIN_PASSWORD"
      #C’est simplement le nom du step dans GitHub Actions. Il sert à décrire ce que fait le step dans l’interface GitHub Actions.
      - name: create draft release
        #Cela indique que tu utilises l’action GitHub cloud-release fournie par CrabNebula. L’@v0 signifie la version de l’action (ici la version initiale).
        uses: crabnebula-dev/cloud-release@v0
        #Permet de passer des paramètres à l’action. Ici, il y a deux paramètres principaux
        with:
          #release draft → crée un draft release sur CrabNebula (équivalent à créer une release ou version mais pas encore publiée)
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri --notes-file ${{ env.RELEASE_NOTE }}
          #Fournit la clé API CrabNebula pour authentifier l’action et permettre la création du draft release.
          api-key: ${{env.CN_API_KEY}}

  build:
    #Tant que  le jobs draft n'est pas termine
    needs: draft
    strategy:
      fail-fast: false
      #Definir la liste des sytemes d'éxploitation pour lesquels on va builder
      matrix:
        include:
          # macOS Universal (combines x86_64 and aarch64)
            #os pour definir le sytem sur lequel on va builder
          - os: macos-latest
            #Architecture de l'ínstallable
            target: universal-apple-darwin
            #La description
            name: "macOS Universal"
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: "Windows x64"

          - os: windows-latest
            target: i686-pc-windows-msvc
            name: "Windows x86"

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            name: "Windows ARM64"
          
          # Linux builds
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: "Linux x64"
          - os: ubuntu-22.04
            target: i686-unknown-linux-gnu
            name: "Linux x86"
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            name: "Linux ARM64"

      #Lancer le job pour faire tous les build l'un apres l'autre
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9
          
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Install stable toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true
              
      # Linux dependencies for all Linux targets, we only need to install linux dependencies for the os build
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
          sudo apt-get install -y gcc-multilib
              
      # Install cross-compilation toolchains for Linux
      - name: Install Linux cross-compilation dependencies
        if: matrix.os == 'ubuntu-22.04' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          case "${{ matrix.target }}" in
            "i686-unknown-linux-gnu")
              sudo apt-get install -y gcc-i686-linux-gnu
              echo "CC_i686_unknown_linux_gnu=i686-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CXX_i686_unknown_linux_gnu=i686-linux-gnu-g++" >> $GITHUB_ENV
              ;;
            "aarch64-unknown-linux-gnu")
              sudo apt-get install -y gcc-aarch64-linux-gnu
              echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
              ;;
          esac
              
      # Add Rust targets
      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}
        
      # Install pnpm dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Import Apple Developer Certificate
      - name: Import Apple Developer Certificate
        run: |
          echo ${{env.APPLE_CERTIFICATE}} | base64 --decode > certificate.p12
          security create-keychain -p "${{env.KEYCHAIN_PASSWORD}}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{env.KEYCHAIN_PASSWORD}}" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "${{env.APPLE_EXPORT_CERTIFICATE_PASSWORD}}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{env.KEYCHAIN_PASSWORD}}" build.keychain
          security find-identity -v -p codesigning build.keychain
          
      # Verify Certificate
      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      # Build for macOS Universal
      - name: Build macOS Universal
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          pnpm tauri build --target ${{ matrix.target }} --config src-tauri/tauri.onlineappstore.conf.json
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          
      # Build for Windows
      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: pnpm tauri build --target ${{ matrix.target }} --config ./src-tauri/tauri.onlineappstore.conf.json
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
              
      # Build for Linux
      - name: Build Linux
        if: matrix.os == 'ubuntu-22.04'
        run: pnpm tauri build --target ${{ matrix.target }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      #Telecharchements des assets
      - name: Upload assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}
          path: ./src-tauri

  publish:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Publish release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release publish ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ env.CN_API_KEY }}