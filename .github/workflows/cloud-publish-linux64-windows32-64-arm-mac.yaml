name: Prophet Kacou Release Process
on:
  push:
    branches:
      - deploy
  workflow_dispatch:
    inputs:
      application:
        description: "The fully qualified slug of your app on CrabNebula Cloud"
        required: true
        default: "prophet-kacou/prophet-kacou"

env:
  CN_APPLICATION: ${{ vars.CN_APPLICATION }}
  CN_API_KEY: ${{ vars.CN_API_KEY }}

  RELEASE_NOTE: ./release-notes.txt

  TAURI_SIGNING_PRIVATE_KEY: ${{ vars.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ vars.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

  GPG_PRIVATE_KEY: ${{ vars.LINUX_SIGN_PRIVATE_KEY }}
  LINUX_SIGN_KEY_ID: ${{ vars.LINUX_SIGN_KEY_ID }}
  LINUX_APPIMAGETOOL_SIGN_PASSPHRASE: ${{ vars.LINUX_APPIMAGETOOL_SIGN_PASSPHRASE }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  draft:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
    #   - name: create draft release
    #     uses: crabnebula-dev/cloud-release@v0
    #     with:
    #       command: release draft ${{ env.CN_APPLICATION }} --framework tauri --notes-file ${{ env.RELEASE_NOTE }}
    #       api-key: ${{ env.CN_API_KEY }}

  build-macos:
    name: Build macOS (x86_64, ARM64, Universal)
    needs: draft
    runs-on: macos-latest
    env:
        APPLE_ID: ${{ vars.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ vars.APPLE_ID_PASSWORD }}
        APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER }}
        APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Import Apple Developer Certificate - FIXED VERSION
      - name: Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ vars.APPLE_MAC_DEVELOPPER_ID }}
          APPLE_CERTIFICATE_PASSWORD: ${{ vars.APPLE_EXPORT_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ vars.KEYCHAIN_PASSWORD }}
        run: |
          # Create certificate file
          echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
          
          # Delete existing keychain if it exists
          security delete-keychain build.keychain || true
          
          # Create and configure keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
          
          # Import certificate with proper flags
          security import certificate.p12 \
            -k build.keychain \
            -P "$APPLE_CERTIFICATE_PASSWORD" \
            -A \
            -t cert \
            -f pkcs12
          
          # Set partition list for codesigning
          security set-key-partition-list \
            -S apple-tool:,apple: \
            -s \
            -k "$KEYCHAIN_PASSWORD" \
            build.keychain
          
          # Verify certificate import
          security find-identity -v -p codesigning build.keychain
          
          # Clean up certificate file
          rm -f certificate.p12
          
          echo "Certificate import completed"

      - name: Verify Certificate
        run: |
          echo "Verifying certificate..."
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1)
          if [ -z "$CERT_INFO" ]; then
            echo "No Developer ID Application certificate found!"
            security find-identity -v -p codesigning build.keychain
            exit 1
          fi
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate verified: $CERT_ID"


      # Set up Apple API key for notarization (Tauri v2 compatible)
      - name: Set up Apple API key
        run: |
          # Create the directory structure
          mkdir -p ~/.private_keys
          
          # Handle the API key - it might be base64 encoded or raw
          API_KEY_CONTENT="${{ vars.APPLE_API_PRIVATE_KEY }}"
          API_KEY_FILE="$HOME/.private_keys/AuthKey_${{ vars.APPLE_API_KEY }}.p8"
          
          # Try to detect if it's base64 encoded
          if echo "$API_KEY_CONTENT" | grep -q "BEGIN PRIVATE KEY"; then
            echo "API key appears to be in raw format"
            echo "$API_KEY_CONTENT" > "$API_KEY_FILE"
          else
            echo "API key appears to be base64 encoded, decoding..."
            echo "$API_KEY_CONTENT" | base64 --decode > "$API_KEY_FILE"
          fi
          
          # Verify the key file format
          echo "=== Verifying API key file format ==="
          if [ -f "$API_KEY_FILE" ]; then
            echo "File size: $(wc -c < "$API_KEY_FILE") bytes"
            echo "First line: $(head -1 "$API_KEY_FILE")"
            echo "Last line: $(tail -1 "$API_KEY_FILE")"
            
            # Check if it's a valid PEM format
            if head -1 "$API_KEY_FILE" | grep -q "BEGIN PRIVATE KEY" && tail -1 "$API_KEY_FILE" | grep -q "END PRIVATE KEY"; then
              echo "✅ API key format appears valid"
            else
              echo "❌ API key format appears invalid"
              echo "Full content preview:"
              cat "$API_KEY_FILE"
              exit 1
            fi
          else
            echo "❌ Failed to create API key file"
            exit 1
          fi
          
          echo "APPLE_API_KEY_PATH=$API_KEY_FILE" >> $GITHUB_ENV
          
          # Test the key with a simple openssl command to verify ASN.1 format
          echo "=== Testing ASN.1 format with OpenSSL ==="
          if openssl pkey -in "$API_KEY_FILE" -noout 2>/dev/null; then
            echo "✅ OpenSSL can parse the private key successfully"
          else
            echo "❌ OpenSSL failed to parse the private key"
            echo "This indicates an ASN.1 format issue"
            # Try to get more details about the error
            openssl pkey -in "$API_KEY_FILE" -noout 2>&1 || true
            exit 1
          fi

      # Test notarization credentials
      - name: Test Apple API credentials
        run: |
          API_KEY_FILE="$HOME/.private_keys/AuthKey_${{ vars.APPLE_API_KEY }}.p8"
          
          echo "=== Testing Apple API credentials ==="
          echo "Key ID: ${{ vars.APPLE_API_KEY }}"
          echo "Issuer ID: ${{ vars.APPLE_API_ISSUER }}"
          echo "Key file: $API_KEY_FILE"
          
          # Test with xcrun notarytool to validate credentials
          echo "Testing credentials with notarytool..."
          if xcrun notarytool history --key "$API_KEY_FILE" --key-id "${{ vars.APPLE_API_KEY }}" --issuer "${{ vars.APPLE_API_ISSUER }}" --limit 1 2>&1; then
            echo "✅ Apple API credentials are valid"
          else
            echo "❌ Apple API credentials test failed"
            echo "This could indicate:"
            echo "1. Invalid API key format"
            echo "2. Wrong Key ID"
            echo "3. Wrong Issuer ID" 
            echo "4. API key doesn't have notarization permissions"
            exit 1
          fi

      - name: Install stable Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          cache: true

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Add Rust targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Build all targets with improved error handling
      - name: Build macOS x86_64
        run: |
          echo "Building for x86_64-apple-darwin..."
          echo "Using certificate: $CERT_ID"
          echo "API Key ID: ${{ vars.APPLE_API_KEY }}"
          echo "API Issuer: ${{ vars.APPLE_API_ISSUER }}"
          echo "API Key Path: $APPLE_API_KEY_PATH"

          # Verify notarization setup
          if [ ! -f "$APPLE_API_KEY_PATH" ]; then
            echo "Error: Apple API key file not found at $APPLE_API_KEY_PATH"
            echo "Current working directory: $(pwd)"
            echo "Home directory: $HOME"
            echo "Looking for: $APPLE_API_KEY_PATH"
            find ~ -name "AuthKey_*.p8" 2>/dev/null || true
            exit 1
          fi
          
          # Check API key format
          echo "=== Verifying API key file ==="
          ls -la "$APPLE_API_KEY_PATH"
          if ! head -1 "$APPLE_API_KEY_PATH" | grep -q "BEGIN PRIVATE KEY"; then
            echo "Warning: API key might not be in correct format"
            head -1 "$APPLE_API_KEY_PATH"
          else
            echo "API key format looks correct"
          fi
          
          # Export the path explicitly for the Tauri command
          export APPLE_API_KEY_PATH="$APPLE_API_KEY_PATH"
          
          pnpm tauri build --target x86_64-apple-darwin --config src-tauri/tauri.offlineappstore.conf.json --verbose
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: /Users/runner/.private_keys/AuthKey_${{ vars.APPLE_API_KEY }}.p8

      - name: Build macOS ARM64
        run: |
          echo "Building for aarch64-apple-darwin..."
          pnpm tauri build --target aarch64-apple-darwin --config src-tauri/tauri.offlineappstore.conf.json --verbose
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}

      - name: Build macOS Universal
        run: |
          echo "Building universal binary..."
          pnpm tauri build --bundles app --target universal-apple-darwin --config src-tauri/tauri.offlineappstore.conf.json --verbose
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
          APPLE_API_ISSUER: ${{ vars.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ vars.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: keys/apple/AuthKey_8V37C4L378.p8

      # Debug: list artifacts
      - name: List build artifacts
        run: |
          echo "=== Build Artifacts ==="
          find src-tauri/target -name "*.app" -type d
          find src-tauri/target -name "*.dmg"
          find src-tauri/target -name "*.pkg"

      # Upload all artifacts to CrabNebula
      - name: Upload macOS builds to CrabNebula
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri --mac-signing-identity ${{ env.CERT_ID }}
          api-key: ${{ env.CN_API_KEY }}

  # build-windows-x64:
  #   name: Build Windows x64
  #   needs: draft
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - name: Install stable toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         cache: true
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli
  #     - name: Add Rust target
  #       run: rustup target add x86_64-pc-windows-msvc
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #     - name: Build Windows x86_64-pc-windows-msvc
  #       run: pnpm tauri build --target x86_64-pc-windows-msvc
  #       env:
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #     - name: Upload assets
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release upload ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}

  # build-windows-x86:
  #   name: Build Windows x86
  #   needs: draft
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - name: Install stable toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         cache: true
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli
  #     - name: Add Rust target
  #       run: rustup target add i686-pc-windows-msvc
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #     - name: Build Windows i686-pc-windows-msvc
  #       run: pnpm tauri build --target i686-pc-windows-msvc
  #       env:
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #     - name: Upload assets
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release upload ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}

  # build-windows-arm64:
  #   name: Build Windows ARM64
  #   needs: draft
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - name: Install stable toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         cache: true
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli
  #     - name: Add Rust target
  #       run: rustup target add aarch64-pc-windows-msvc
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #     - name: Build Windows aarch64-pc-windows-msvc
  #       run: pnpm tauri build --target aarch64-pc-windows-msvc
  #       env:
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #     - name: Upload assets
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release upload ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}

  # build-linux-x64:
  #   name: Build Linux x64
  #   needs: draft
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #     - name: Install stable toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         cache: true
  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli
  #     - name: Install Linux dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y webkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
  #         sudo apt-get install -y pkg-config build-essential
  #     - name: Add Rust target
  #       run: rustup target add x86_64-unknown-linux-gnu
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Import GPG key
  #       run: |
  #         echo "${{ env.GPG_PRIVATE_KEY }}" | gpg --batch --import

  #     - name: Build Linux x86_64-unknown-linux-gnu
  #       run: pnpm tauri build --target x86_64-unknown-linux-gnu
  #       env:
  #         SIGN: 1
  #         SIGN_KEY: ${{ env.LINUX_SIGN_KEY_ID }}
  #         APPIMAGETOOL_SIGN_PASSPHRASE: ${{ env.LINUX_APPIMAGETOOL_SIGN_PASSPHRASE }}
  #         APPIMAGETOOL_FORCE_SIGN: 1
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #     - name: Upload assets
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release upload ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}

  # build-linux-aarch64:
  #   name: Build Linux aarch64
  #   needs: draft
  #   runs-on: ubuntu-22.04-arm
  #   steps:

  #     - uses: actions/checkout@v4
  #     - name: Install pnpm
  #       uses: pnpm/action-setup@v3
  #       with:
  #         version: 9

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: 'pnpm'

  #     - name: Install stable Rust toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         cache: true

  #     - name: Install Tauri CLI
  #       run: npm install -g @tauri-apps/cli
  #     - name: Install Linux dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y webkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
  #         sudo apt-get install -y pkg-config build-essential
  #         sudo apt-get install -y xdg-utils
  #     - name: Add Rust target
  #       run: rustup target add aarch64-unknown-linux-gnu
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Import GPG key
  #       run: |
  #         echo "${{ env.GPG_PRIVATE_KEY }}" | gpg --batch --import

  #     - name: Build Linux aarch64-unknown-linux-gnu
  #       run: pnpm tauri build --target aarch64-unknown-linux-gnu
  #       env:
  #         SIGN: 1
  #         SIGN_KEY: ${{ env.LINUX_SIGN_KEY_ID }}
  #         APPIMAGETOOL_SIGN_PASSPHRASE: ${{ env.LINUX_APPIMAGETOOL_SIGN_PASSPHRASE }}
  #         APPIMAGETOOL_FORCE_SIGN: 1
  #         TAURI_SIGNING_PRIVATE_KEY: ${{ env.TAURI_SIGNING_PRIVATE_KEY }}
  #         TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
  #     - name: Upload assets
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release upload ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}

  # publish:
  #   needs: 
  #     - build-macos
  #     - build-windows-x64
  #     - build-windows-x86
  #     - build-windows-arm64
  #     - build-linux-x64
  #     - build-linux-aarch64
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Publish release
  #       uses: crabnebula-dev/cloud-release@v0
  #       with:
  #         command: release publish ${{ env.CN_APPLICATION }} --framework tauri
  #         api-key: ${{ env.CN_API_KEY }}