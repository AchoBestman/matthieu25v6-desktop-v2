# Use Ubuntu 20.04 for modern compatibility
FROM --platform=linux/amd64 ubuntu:20.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV APPIMAGE_EXTRACT_AND_RUN=1
ENV NO_STRIP=1
ENV CI=true

# Install system dependencies for Tauri on x86_64
RUN apt-get update && apt-get install -y \
    # Core build tools
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    # Basic utilities
    curl \
    wget \
    git \
    file \
    ca-certificates \
    pkg-config \
    # SSL and crypto
    libssl-dev \
    # GTK and WebKit dependencies
    libgtk-3-dev \
    libwebkit2gtk-4.0-dev \
    libjavascriptcoregtk-4.0-dev \
    libsoup2.4-dev \
    # AppIndicator
    libappindicator3-dev \
    librsvg2-dev \
    # AppImage creation tools
    libfuse2 \
    xz-utils \
    gzip \
    xdg-utils \
    squashfs-tools \
    p7zip-full \
    # Additional dependencies
    libxdo-dev \
    libstdc++6 \
    zlib1g-dev \
    # X11 libraries
    libx11-6 \
    libxext6 \
    libxrender1 \
    libxtst6 \
    libxi6 \
    libxrandr2 \
    libxinerama1 \
    libxcursor1 \
    libxcomposite1 \
    libxdamage1 \
    libxfixes3 \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 18.x (needed for Tauri 2)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g pnpm@8

# Verify Node.js installation
RUN node -v && npm -v && pnpm -v

# Create non-root user
RUN useradd -m -s /bin/bash tauri
USER tauri
WORKDIR /app

# Install Rust for x86_64 with stable toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
ENV PATH="/home/tauri/.cargo/bin:${PATH}"

# Verify Rust installation
RUN rustc --version && cargo --version

# Set environment for building
ENV RUST_BACKTRACE=1

# Copy only manifest and lockfile first for caching
COPY --chown=tauri:tauri package.json pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --no-frozen-lockfile

# Copy the rest of the project
COPY --chown=tauri:tauri . .

# Debug info
RUN echo "=== Project Structure ===" && \
    ls -la && \
    echo "=== Tauri Config ===" && \
    cat src-tauri/tauri.conf.json | grep -A5 -B5 "bundle" || echo "Config check failed" && \
    echo "=== Architecture ===" && \
    uname -a && \
    echo "=== glibc version ===" && \
    ldd --version

# Build Tauri app (AppImage, DEB, RPM)
RUN echo "=== Building Tauri App for x86_64 ===" && \
    (pnpm tauri build --bundles "appimage,deb,rpm" --verbose || \
     (echo "All formats failed, trying individually..." && \
      (pnpm tauri build --bundles appimage --verbose || echo "AppImage failed") && \
      (pnpm tauri build --bundles deb --verbose || echo "DEB failed") && \
      (pnpm tauri build --bundles rpm --verbose || echo "RPM failed"))) && \
    echo "=== Build Results ===" && \
    find /app/src-tauri/target -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" 2>/dev/null || echo "Some build artifacts may be missing"

# Final verification
RUN echo "=== Final artifact check ===" && \
    ls -la /app/src-tauri/target/release/bundle/ || echo "Bundle directory not found" && \
    ls -la /app/src-tauri/target/release/ || echo "Release directory not found"
